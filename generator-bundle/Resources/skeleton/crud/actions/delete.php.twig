
    /**
{% block phpdoc_method_header %}
     * Deletes a {{ entity_singularized }} entity.
{% endblock phpdoc_method_header %}
     *
{% block phpdoc_method_annotations %}
{% if 'annotation' == format %}
     * @Route("/{{ '{' ~ identifier ~ '}' }}", name="{{ route_name_prefix }}_delete")
     * @Method("DELETE")
{% endif %}
{% endblock phpdoc_method_annotations %}
     */
{% block method_definition %}
    public function deleteAction(Request $request, {{ entity_class }} ${{ entity_singularized }})
{% endblock method_definition %}
    {
{% block method_body %}
        $form = $this->createDeleteForm(${{ entity_singularized }});
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $em->remove(${{ entity_singularized }});
            $em->flush();
        }
{% endblock method_body %}

{% block method_return %}
        return $this->redirectToRoute('{{ route_name_prefix }}_index');
{% endblock method_return %}
    }

{% block form %}
    /**
     * Creates a form to delete a {{ entity_singularized }} entity.
     *
     * @param {{ entity_class }} ${{ entity_singularized }} The {{ entity_singularized }} entity
     *
     * @return \Symfony\Component\Form\Form The form
     */
    private function createDeleteForm({{ entity_class }} ${{ entity_singularized }})
    {
        return $this->createFormBuilder()
            ->setAction($this->generateUrl('{{ route_name_prefix }}_delete', array('{{ identifier }}' => ${{ entity_singularized }}->get{{ identifier|capitalize }}())))
            ->setMethod('DELETE')
            ->getForm()
        ;
    }

    /**
     * Print a {{ entity_singularized }} entity.
     *
     * @Route("/{{ '{' ~ identifier ~ '}' }}/print", name="{{ route_name_prefix }}_print")
     * @Method({"GET", "POST"})
     */
    public function printAction(Request $request, {{ entity_class }} ${{ entity_singularized }})
    {
        $em = $this->getDoctrine()->getManager();
        $ut = $this->get('cps.util');

        $path = $this->get('kernel')->getRootDir().'/..';
        $_fechaInput = 'Fecha para la parte inferior';
        $html = 'Texto con codigo de html para imprimir';

        $pdf = new FPDI();
        $pagecount = $pdf->setSourceFile($path."/web/docs/blankHeaderFooter.pdf");
        $tppl = $pdf->importPage(1);
        $title = 'CPS - H.E.Seton - Aislamiento Covid';
        $pdf->SetTitle($title);
        $pdf->SetAuthor('Ing. Oscar Choque Castro');
        $pdf->AddPage('Portrait', 'Letter');
        $pdf->useTemplate($tppl);
        $pdf->SetMargins(25, 200, 25);
        $pdf->Ln(30);
        $pdf->SetFont('Helvetica','BU',14);
        $pdf->Cell(0,10,"Titulo prinicipal",0,1,'C');
        $pdf->Ln(4);
        $pdf->SetFont('Helvetica','B',13);
        $pdf->Cell(0,10,"Titulo secundario",0,1,'C');
        $pdf->Ln(4);
        $pdf->SetFont('Times','',14);
        $pdf->WriteHTML($html);
        $pdf->Ln(15);
        $pdf->SetFont('Times','',14);
        $pdf->Cell(0,10, 'Cochabamba, '.$_fechaInput,0,1,'R');
        $pdf->Ln(40);
        $width_cell=array(80,80);
        $pdf->SetFont('Times','',14);
        $pdf->Cell(80 ,5 , 'Nombre Izquierda',0,0,'C',false);
        $pdf->Cell(80 ,5 , 'Nombre Derecha', 0, 1,'C',false);
        $pdf->Cell(80 ,5 , 'Descripcion Izquierda',0,0,'C',false);
        $pdf->Cell(80 ,5 , 'descripcion Derecha',0,1,'C',false);
        $pdf->Output();
    }
{% endblock form %}
